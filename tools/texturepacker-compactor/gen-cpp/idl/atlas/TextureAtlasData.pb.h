// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idl/atlas/TextureAtlasData.proto

#ifndef PROTOBUF_idl_2fatlas_2fTextureAtlasData_2eproto__INCLUDED
#define PROTOBUF_idl_2fatlas_2fTextureAtlasData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace jc_res_atlas {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
void protobuf_AssignDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
void protobuf_ShutdownFile_idl_2fatlas_2fTextureAtlasData_2eproto();

class Rectangle;
class Size;
class AtlasTexture;
class AtlasGroup;

enum AtlasGroup_PixelFormat {
  AtlasGroup_PixelFormat_RGBA8888 = 0,
  AtlasGroup_PixelFormat_RGB888 = 1,
  AtlasGroup_PixelFormat_RGB565 = 2,
  AtlasGroup_PixelFormat_RGBA4444 = 3,
  AtlasGroup_PixelFormat_RGB5551 = 4
};
bool AtlasGroup_PixelFormat_IsValid(int value);
const AtlasGroup_PixelFormat AtlasGroup_PixelFormat_PixelFormat_MIN = AtlasGroup_PixelFormat_RGBA8888;
const AtlasGroup_PixelFormat AtlasGroup_PixelFormat_PixelFormat_MAX = AtlasGroup_PixelFormat_RGB5551;
const int AtlasGroup_PixelFormat_PixelFormat_ARRAYSIZE = AtlasGroup_PixelFormat_PixelFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* AtlasGroup_PixelFormat_descriptor();
inline const ::std::string& AtlasGroup_PixelFormat_Name(AtlasGroup_PixelFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    AtlasGroup_PixelFormat_descriptor(), value);
}
inline bool AtlasGroup_PixelFormat_Parse(
    const ::std::string& name, AtlasGroup_PixelFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AtlasGroup_PixelFormat>(
    AtlasGroup_PixelFormat_descriptor(), name, value);
}
// ===================================================================

class Rectangle : public ::google::protobuf::Message {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();

  void Swap(Rectangle* other);

  // implements Message ----------------------------------------------

  Rectangle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1000;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1000;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2000;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2000;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 w = 3000;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 3000;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // required int32 h = 4000;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 4000;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jc_res_atlas.Rectangle)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  friend void protobuf_AssignDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  friend void protobuf_ShutdownFile_idl_2fatlas_2fTextureAtlasData_2eproto();

  void InitAsDefaultInstance();
  static Rectangle* default_instance_;
};
// -------------------------------------------------------------------

class Size : public ::google::protobuf::Message {
 public:
  Size();
  virtual ~Size();

  Size(const Size& from);

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Size& default_instance();

  void Swap(Size* other);

  // implements Message ----------------------------------------------

  Size* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Size& from);
  void MergeFrom(const Size& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 w = 1000;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1000;
  inline ::google::protobuf::int32 w() const;
  inline void set_w(::google::protobuf::int32 value);

  // required int32 h = 2000;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 2000;
  inline ::google::protobuf::int32 h() const;
  inline void set_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jc_res_atlas.Size)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  friend void protobuf_AssignDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  friend void protobuf_ShutdownFile_idl_2fatlas_2fTextureAtlasData_2eproto();

  void InitAsDefaultInstance();
  static Size* default_instance_;
};
// -------------------------------------------------------------------

class AtlasTexture : public ::google::protobuf::Message {
 public:
  AtlasTexture();
  virtual ~AtlasTexture();

  AtlasTexture(const AtlasTexture& from);

  inline AtlasTexture& operator=(const AtlasTexture& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AtlasTexture& default_instance();

  void Swap(AtlasTexture* other);

  // implements Message ----------------------------------------------

  AtlasTexture* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AtlasTexture& from);
  void MergeFrom(const AtlasTexture& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uniqueId = 1000;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1000;
  inline const ::std::string& uniqueid() const;
  inline void set_uniqueid(const ::std::string& value);
  inline void set_uniqueid(const char* value);
  inline void set_uniqueid(const char* value, size_t size);
  inline ::std::string* mutable_uniqueid();
  inline ::std::string* release_uniqueid();
  inline void set_allocated_uniqueid(::std::string* uniqueid);

  // required string filename = 2000;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2000;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required .jc_res_atlas.Rectangle frame = 3000;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 3000;
  inline const ::jc_res_atlas::Rectangle& frame() const;
  inline ::jc_res_atlas::Rectangle* mutable_frame();
  inline ::jc_res_atlas::Rectangle* release_frame();
  inline void set_allocated_frame(::jc_res_atlas::Rectangle* frame);

  // required bool rotated = 4000;
  inline bool has_rotated() const;
  inline void clear_rotated();
  static const int kRotatedFieldNumber = 4000;
  inline bool rotated() const;
  inline void set_rotated(bool value);

  // required bool trimmed = 5000;
  inline bool has_trimmed() const;
  inline void clear_trimmed();
  static const int kTrimmedFieldNumber = 5000;
  inline bool trimmed() const;
  inline void set_trimmed(bool value);

  // optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
  inline bool has_spritesourcesize() const;
  inline void clear_spritesourcesize();
  static const int kSpriteSourceSizeFieldNumber = 6000;
  inline const ::jc_res_atlas::Rectangle& spritesourcesize() const;
  inline ::jc_res_atlas::Rectangle* mutable_spritesourcesize();
  inline ::jc_res_atlas::Rectangle* release_spritesourcesize();
  inline void set_allocated_spritesourcesize(::jc_res_atlas::Rectangle* spritesourcesize);

  // optional .jc_res_atlas.Size sourceSize = 7000;
  inline bool has_sourcesize() const;
  inline void clear_sourcesize();
  static const int kSourceSizeFieldNumber = 7000;
  inline const ::jc_res_atlas::Size& sourcesize() const;
  inline ::jc_res_atlas::Size* mutable_sourcesize();
  inline ::jc_res_atlas::Size* release_sourcesize();
  inline void set_allocated_sourcesize(::jc_res_atlas::Size* sourcesize);

  // @@protoc_insertion_point(class_scope:jc_res_atlas.AtlasTexture)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_rotated();
  inline void clear_has_rotated();
  inline void set_has_trimmed();
  inline void clear_has_trimmed();
  inline void set_has_spritesourcesize();
  inline void clear_has_spritesourcesize();
  inline void set_has_sourcesize();
  inline void clear_has_sourcesize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uniqueid_;
  ::std::string* filename_;
  ::jc_res_atlas::Rectangle* frame_;
  ::jc_res_atlas::Rectangle* spritesourcesize_;
  ::jc_res_atlas::Size* sourcesize_;
  bool rotated_;
  bool trimmed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  friend void protobuf_AssignDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  friend void protobuf_ShutdownFile_idl_2fatlas_2fTextureAtlasData_2eproto();

  void InitAsDefaultInstance();
  static AtlasTexture* default_instance_;
};
// -------------------------------------------------------------------

class AtlasGroup : public ::google::protobuf::Message {
 public:
  AtlasGroup();
  virtual ~AtlasGroup();

  AtlasGroup(const AtlasGroup& from);

  inline AtlasGroup& operator=(const AtlasGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AtlasGroup& default_instance();

  void Swap(AtlasGroup* other);

  // implements Message ----------------------------------------------

  AtlasGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AtlasGroup& from);
  void MergeFrom(const AtlasGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AtlasGroup_PixelFormat PixelFormat;
  static const PixelFormat RGBA8888 = AtlasGroup_PixelFormat_RGBA8888;
  static const PixelFormat RGB888 = AtlasGroup_PixelFormat_RGB888;
  static const PixelFormat RGB565 = AtlasGroup_PixelFormat_RGB565;
  static const PixelFormat RGBA4444 = AtlasGroup_PixelFormat_RGBA4444;
  static const PixelFormat RGB5551 = AtlasGroup_PixelFormat_RGB5551;
  static inline bool PixelFormat_IsValid(int value) {
    return AtlasGroup_PixelFormat_IsValid(value);
  }
  static const PixelFormat PixelFormat_MIN =
    AtlasGroup_PixelFormat_PixelFormat_MIN;
  static const PixelFormat PixelFormat_MAX =
    AtlasGroup_PixelFormat_PixelFormat_MAX;
  static const int PixelFormat_ARRAYSIZE =
    AtlasGroup_PixelFormat_PixelFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PixelFormat_descriptor() {
    return AtlasGroup_PixelFormat_descriptor();
  }
  static inline const ::std::string& PixelFormat_Name(PixelFormat value) {
    return AtlasGroup_PixelFormat_Name(value);
  }
  static inline bool PixelFormat_Parse(const ::std::string& name,
      PixelFormat* value) {
    return AtlasGroup_PixelFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string uniqueId = 1000;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIdFieldNumber = 1000;
  inline const ::std::string& uniqueid() const;
  inline void set_uniqueid(const ::std::string& value);
  inline void set_uniqueid(const char* value);
  inline void set_uniqueid(const char* value, size_t size);
  inline ::std::string* mutable_uniqueid();
  inline ::std::string* release_uniqueid();
  inline void set_allocated_uniqueid(::std::string* uniqueid);

  // repeated .jc_res_atlas.AtlasTexture images = 2000;
  inline int images_size() const;
  inline void clear_images();
  static const int kImagesFieldNumber = 2000;
  inline const ::jc_res_atlas::AtlasTexture& images(int index) const;
  inline ::jc_res_atlas::AtlasTexture* mutable_images(int index);
  inline ::jc_res_atlas::AtlasTexture* add_images();
  inline const ::google::protobuf::RepeatedPtrField< ::jc_res_atlas::AtlasTexture >&
      images() const;
  inline ::google::protobuf::RepeatedPtrField< ::jc_res_atlas::AtlasTexture >*
      mutable_images();

  // required string filename = 3000;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3000;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional float scale = 4000;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 4000;
  inline float scale() const;
  inline void set_scale(float value);

  // optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
  inline bool has_importpixelformat() const;
  inline void clear_importpixelformat();
  static const int kImportPixelFormatFieldNumber = 5000;
  inline ::jc_res_atlas::AtlasGroup_PixelFormat importpixelformat() const;
  inline void set_importpixelformat(::jc_res_atlas::AtlasGroup_PixelFormat value);

  // @@protoc_insertion_point(class_scope:jc_res_atlas.AtlasGroup)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_importpixelformat();
  inline void clear_has_importpixelformat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uniqueid_;
  ::google::protobuf::RepeatedPtrField< ::jc_res_atlas::AtlasTexture > images_;
  ::std::string* filename_;
  float scale_;
  int importpixelformat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  friend void protobuf_AssignDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  friend void protobuf_ShutdownFile_idl_2fatlas_2fTextureAtlasData_2eproto();

  void InitAsDefaultInstance();
  static AtlasGroup* default_instance_;
};
// ===================================================================


// ===================================================================

// Rectangle

// required int32 x = 1000;
inline bool Rectangle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rectangle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rectangle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rectangle::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Rectangle::x() const {
  return x_;
}
inline void Rectangle::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2000;
inline bool Rectangle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rectangle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rectangle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rectangle::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Rectangle::y() const {
  return y_;
}
inline void Rectangle::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 w = 3000;
inline bool Rectangle::has_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rectangle::set_has_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rectangle::clear_has_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rectangle::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 Rectangle::w() const {
  return w_;
}
inline void Rectangle::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
}

// required int32 h = 4000;
inline bool Rectangle::has_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rectangle::set_has_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rectangle::clear_has_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rectangle::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 Rectangle::h() const {
  return h_;
}
inline void Rectangle::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
}

// -------------------------------------------------------------------

// Size

// required int32 w = 1000;
inline bool Size::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Size::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Size::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Size::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline ::google::protobuf::int32 Size::w() const {
  return w_;
}
inline void Size::set_w(::google::protobuf::int32 value) {
  set_has_w();
  w_ = value;
}

// required int32 h = 2000;
inline bool Size::has_h() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Size::set_has_h() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Size::clear_has_h() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Size::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline ::google::protobuf::int32 Size::h() const {
  return h_;
}
inline void Size::set_h(::google::protobuf::int32 value) {
  set_has_h();
  h_ = value;
}

// -------------------------------------------------------------------

// AtlasTexture

// required string uniqueId = 1000;
inline bool AtlasTexture::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AtlasTexture::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AtlasTexture::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AtlasTexture::clear_uniqueid() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    uniqueid_->clear();
  }
  clear_has_uniqueid();
}
inline const ::std::string& AtlasTexture::uniqueid() const {
  return *uniqueid_;
}
inline void AtlasTexture::set_uniqueid(const ::std::string& value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
}
inline void AtlasTexture::set_uniqueid(const char* value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
}
inline void AtlasTexture::set_uniqueid(const char* value, size_t size) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AtlasTexture::mutable_uniqueid() {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  return uniqueid_;
}
inline ::std::string* AtlasTexture::release_uniqueid() {
  clear_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uniqueid_;
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AtlasTexture::set_allocated_uniqueid(::std::string* uniqueid) {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (uniqueid) {
    set_has_uniqueid();
    uniqueid_ = uniqueid;
  } else {
    clear_has_uniqueid();
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string filename = 2000;
inline bool AtlasTexture::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AtlasTexture::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AtlasTexture::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AtlasTexture::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& AtlasTexture::filename() const {
  return *filename_;
}
inline void AtlasTexture::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void AtlasTexture::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void AtlasTexture::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AtlasTexture::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* AtlasTexture::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AtlasTexture::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .jc_res_atlas.Rectangle frame = 3000;
inline bool AtlasTexture::has_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AtlasTexture::set_has_frame() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AtlasTexture::clear_has_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AtlasTexture::clear_frame() {
  if (frame_ != NULL) frame_->::jc_res_atlas::Rectangle::Clear();
  clear_has_frame();
}
inline const ::jc_res_atlas::Rectangle& AtlasTexture::frame() const {
  return frame_ != NULL ? *frame_ : *default_instance_->frame_;
}
inline ::jc_res_atlas::Rectangle* AtlasTexture::mutable_frame() {
  set_has_frame();
  if (frame_ == NULL) frame_ = new ::jc_res_atlas::Rectangle;
  return frame_;
}
inline ::jc_res_atlas::Rectangle* AtlasTexture::release_frame() {
  clear_has_frame();
  ::jc_res_atlas::Rectangle* temp = frame_;
  frame_ = NULL;
  return temp;
}
inline void AtlasTexture::set_allocated_frame(::jc_res_atlas::Rectangle* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    set_has_frame();
  } else {
    clear_has_frame();
  }
}

// required bool rotated = 4000;
inline bool AtlasTexture::has_rotated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AtlasTexture::set_has_rotated() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AtlasTexture::clear_has_rotated() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AtlasTexture::clear_rotated() {
  rotated_ = false;
  clear_has_rotated();
}
inline bool AtlasTexture::rotated() const {
  return rotated_;
}
inline void AtlasTexture::set_rotated(bool value) {
  set_has_rotated();
  rotated_ = value;
}

// required bool trimmed = 5000;
inline bool AtlasTexture::has_trimmed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AtlasTexture::set_has_trimmed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AtlasTexture::clear_has_trimmed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AtlasTexture::clear_trimmed() {
  trimmed_ = false;
  clear_has_trimmed();
}
inline bool AtlasTexture::trimmed() const {
  return trimmed_;
}
inline void AtlasTexture::set_trimmed(bool value) {
  set_has_trimmed();
  trimmed_ = value;
}

// optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
inline bool AtlasTexture::has_spritesourcesize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AtlasTexture::set_has_spritesourcesize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AtlasTexture::clear_has_spritesourcesize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AtlasTexture::clear_spritesourcesize() {
  if (spritesourcesize_ != NULL) spritesourcesize_->::jc_res_atlas::Rectangle::Clear();
  clear_has_spritesourcesize();
}
inline const ::jc_res_atlas::Rectangle& AtlasTexture::spritesourcesize() const {
  return spritesourcesize_ != NULL ? *spritesourcesize_ : *default_instance_->spritesourcesize_;
}
inline ::jc_res_atlas::Rectangle* AtlasTexture::mutable_spritesourcesize() {
  set_has_spritesourcesize();
  if (spritesourcesize_ == NULL) spritesourcesize_ = new ::jc_res_atlas::Rectangle;
  return spritesourcesize_;
}
inline ::jc_res_atlas::Rectangle* AtlasTexture::release_spritesourcesize() {
  clear_has_spritesourcesize();
  ::jc_res_atlas::Rectangle* temp = spritesourcesize_;
  spritesourcesize_ = NULL;
  return temp;
}
inline void AtlasTexture::set_allocated_spritesourcesize(::jc_res_atlas::Rectangle* spritesourcesize) {
  delete spritesourcesize_;
  spritesourcesize_ = spritesourcesize;
  if (spritesourcesize) {
    set_has_spritesourcesize();
  } else {
    clear_has_spritesourcesize();
  }
}

// optional .jc_res_atlas.Size sourceSize = 7000;
inline bool AtlasTexture::has_sourcesize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AtlasTexture::set_has_sourcesize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AtlasTexture::clear_has_sourcesize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AtlasTexture::clear_sourcesize() {
  if (sourcesize_ != NULL) sourcesize_->::jc_res_atlas::Size::Clear();
  clear_has_sourcesize();
}
inline const ::jc_res_atlas::Size& AtlasTexture::sourcesize() const {
  return sourcesize_ != NULL ? *sourcesize_ : *default_instance_->sourcesize_;
}
inline ::jc_res_atlas::Size* AtlasTexture::mutable_sourcesize() {
  set_has_sourcesize();
  if (sourcesize_ == NULL) sourcesize_ = new ::jc_res_atlas::Size;
  return sourcesize_;
}
inline ::jc_res_atlas::Size* AtlasTexture::release_sourcesize() {
  clear_has_sourcesize();
  ::jc_res_atlas::Size* temp = sourcesize_;
  sourcesize_ = NULL;
  return temp;
}
inline void AtlasTexture::set_allocated_sourcesize(::jc_res_atlas::Size* sourcesize) {
  delete sourcesize_;
  sourcesize_ = sourcesize;
  if (sourcesize) {
    set_has_sourcesize();
  } else {
    clear_has_sourcesize();
  }
}

// -------------------------------------------------------------------

// AtlasGroup

// required string uniqueId = 1000;
inline bool AtlasGroup::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AtlasGroup::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AtlasGroup::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AtlasGroup::clear_uniqueid() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    uniqueid_->clear();
  }
  clear_has_uniqueid();
}
inline const ::std::string& AtlasGroup::uniqueid() const {
  return *uniqueid_;
}
inline void AtlasGroup::set_uniqueid(const ::std::string& value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
}
inline void AtlasGroup::set_uniqueid(const char* value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
}
inline void AtlasGroup::set_uniqueid(const char* value, size_t size) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AtlasGroup::mutable_uniqueid() {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    uniqueid_ = new ::std::string;
  }
  return uniqueid_;
}
inline ::std::string* AtlasGroup::release_uniqueid() {
  clear_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uniqueid_;
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AtlasGroup::set_allocated_uniqueid(::std::string* uniqueid) {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (uniqueid) {
    set_has_uniqueid();
    uniqueid_ = uniqueid;
  } else {
    clear_has_uniqueid();
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .jc_res_atlas.AtlasTexture images = 2000;
inline int AtlasGroup::images_size() const {
  return images_.size();
}
inline void AtlasGroup::clear_images() {
  images_.Clear();
}
inline const ::jc_res_atlas::AtlasTexture& AtlasGroup::images(int index) const {
  return images_.Get(index);
}
inline ::jc_res_atlas::AtlasTexture* AtlasGroup::mutable_images(int index) {
  return images_.Mutable(index);
}
inline ::jc_res_atlas::AtlasTexture* AtlasGroup::add_images() {
  return images_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::jc_res_atlas::AtlasTexture >&
AtlasGroup::images() const {
  return images_;
}
inline ::google::protobuf::RepeatedPtrField< ::jc_res_atlas::AtlasTexture >*
AtlasGroup::mutable_images() {
  return &images_;
}

// required string filename = 3000;
inline bool AtlasGroup::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AtlasGroup::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AtlasGroup::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AtlasGroup::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& AtlasGroup::filename() const {
  return *filename_;
}
inline void AtlasGroup::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void AtlasGroup::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void AtlasGroup::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AtlasGroup::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* AtlasGroup::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AtlasGroup::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float scale = 4000;
inline bool AtlasGroup::has_scale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AtlasGroup::set_has_scale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AtlasGroup::clear_has_scale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AtlasGroup::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float AtlasGroup::scale() const {
  return scale_;
}
inline void AtlasGroup::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
inline bool AtlasGroup::has_importpixelformat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AtlasGroup::set_has_importpixelformat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AtlasGroup::clear_has_importpixelformat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AtlasGroup::clear_importpixelformat() {
  importpixelformat_ = 0;
  clear_has_importpixelformat();
}
inline ::jc_res_atlas::AtlasGroup_PixelFormat AtlasGroup::importpixelformat() const {
  return static_cast< ::jc_res_atlas::AtlasGroup_PixelFormat >(importpixelformat_);
}
inline void AtlasGroup::set_importpixelformat(::jc_res_atlas::AtlasGroup_PixelFormat value) {
  assert(::jc_res_atlas::AtlasGroup_PixelFormat_IsValid(value));
  set_has_importpixelformat();
  importpixelformat_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace jc_res_atlas

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jc_res_atlas::AtlasGroup_PixelFormat>() {
  return ::jc_res_atlas::AtlasGroup_PixelFormat_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_idl_2fatlas_2fTextureAtlasData_2eproto__INCLUDED
