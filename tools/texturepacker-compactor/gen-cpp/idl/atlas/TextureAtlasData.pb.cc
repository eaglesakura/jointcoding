// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idl/atlas/TextureAtlasData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "idl/atlas/TextureAtlasData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jc_res_atlas {

namespace {

const ::google::protobuf::Descriptor* Rectangle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rectangle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Size_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Size_reflection_ = NULL;
const ::google::protobuf::Descriptor* AtlasTexture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AtlasTexture_reflection_ = NULL;
const ::google::protobuf::Descriptor* AtlasGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AtlasGroup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AtlasGroup_PixelFormat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_idl_2fatlas_2fTextureAtlasData_2eproto() {
  protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "idl/atlas/TextureAtlasData.proto");
  GOOGLE_CHECK(file != NULL);
  Rectangle_descriptor_ = file->message_type(0);
  static const int Rectangle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, h_),
  };
  Rectangle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rectangle_descriptor_,
      Rectangle::default_instance_,
      Rectangle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rectangle));
  Size_descriptor_ = file->message_type(1);
  static const int Size_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, h_),
  };
  Size_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Size_descriptor_,
      Size::default_instance_,
      Size_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Size));
  AtlasTexture_descriptor_ = file->message_type(2);
  static const int AtlasTexture_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, rotated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, trimmed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, spritesourcesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, sourcesize_),
  };
  AtlasTexture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AtlasTexture_descriptor_,
      AtlasTexture::default_instance_,
      AtlasTexture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasTexture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AtlasTexture));
  AtlasGroup_descriptor_ = file->message_type(3);
  static const int AtlasGroup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasGroup, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasGroup, images_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasGroup, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasGroup, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasGroup, importpixelformat_),
  };
  AtlasGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AtlasGroup_descriptor_,
      AtlasGroup::default_instance_,
      AtlasGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AtlasGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AtlasGroup));
  AtlasGroup_PixelFormat_descriptor_ = AtlasGroup_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_idl_2fatlas_2fTextureAtlasData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rectangle_descriptor_, &Rectangle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Size_descriptor_, &Size::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AtlasTexture_descriptor_, &AtlasTexture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AtlasGroup_descriptor_, &AtlasGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_idl_2fatlas_2fTextureAtlasData_2eproto() {
  delete Rectangle::default_instance_;
  delete Rectangle_reflection_;
  delete Size::default_instance_;
  delete Size_reflection_;
  delete AtlasTexture::default_instance_;
  delete AtlasTexture_reflection_;
  delete AtlasGroup::default_instance_;
  delete AtlasGroup_reflection_;
}

void protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n idl/atlas/TextureAtlasData.proto\022\014jc_r"
    "es_atlas\";\n\tRectangle\022\n\n\001x\030\350\007 \002(\005\022\n\n\001y\030\320"
    "\017 \002(\005\022\n\n\001w\030\270\027 \002(\005\022\n\n\001h\030\240\037 \002(\005\"\036\n\004Size\022\n\n"
    "\001w\030\350\007 \002(\005\022\n\n\001h\030\320\017 \002(\005\"\336\001\n\014AtlasTexture\022\021"
    "\n\010uniqueId\030\350\007 \002(\t\022\021\n\010filename\030\320\017 \002(\t\022\'\n\005"
    "frame\030\270\027 \002(\0132\027.jc_res_atlas.Rectangle\022\020\n"
    "\007rotated\030\240\037 \002(\010\022\020\n\007trimmed\030\210\' \002(\010\0222\n\020spr"
    "iteSourceSize\030\360. \001(\0132\027.jc_res_atlas.Rect"
    "angle\022\'\n\nsourceSize\030\3306 \001(\0132\022.jc_res_atla"
    "s.Size\"\201\002\n\nAtlasGroup\022\021\n\010uniqueId\030\350\007 \002(\t"
    "\022+\n\006images\030\320\017 \003(\0132\032.jc_res_atlas.AtlasTe"
    "xture\022\021\n\010filename\030\270\027 \002(\t\022\016\n\005scale\030\240\037 \001(\002"
    "\022@\n\021importPixelFormat\030\210\' \001(\0162$.jc_res_at"
    "las.AtlasGroup.PixelFormat\"N\n\013PixelForma"
    "t\022\014\n\010RGBA8888\020\000\022\n\n\006RGB888\020\001\022\n\n\006RGB565\020\002\022"
    "\014\n\010RGBA4444\020\003\022\013\n\007RGB5551\020\004B(\n&com.eagles"
    "akura.resource.texture.atlas", 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "idl/atlas/TextureAtlasData.proto", &protobuf_RegisterTypes);
  Rectangle::default_instance_ = new Rectangle();
  Size::default_instance_ = new Size();
  AtlasTexture::default_instance_ = new AtlasTexture();
  AtlasGroup::default_instance_ = new AtlasGroup();
  Rectangle::default_instance_->InitAsDefaultInstance();
  Size::default_instance_->InitAsDefaultInstance();
  AtlasTexture::default_instance_->InitAsDefaultInstance();
  AtlasGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_idl_2fatlas_2fTextureAtlasData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_idl_2fatlas_2fTextureAtlasData_2eproto {
  StaticDescriptorInitializer_idl_2fatlas_2fTextureAtlasData_2eproto() {
    protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  }
} static_descriptor_initializer_idl_2fatlas_2fTextureAtlasData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Rectangle::kXFieldNumber;
const int Rectangle::kYFieldNumber;
const int Rectangle::kWFieldNumber;
const int Rectangle::kHFieldNumber;
#endif  // !_MSC_VER

Rectangle::Rectangle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rectangle::InitAsDefaultInstance() {
}

Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rectangle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rectangle::~Rectangle() {
  SharedDtor();
}

void Rectangle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rectangle_descriptor_;
}

const Rectangle& Rectangle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  return *default_instance_;
}

Rectangle* Rectangle::default_instance_ = NULL;

Rectangle* Rectangle::New() const {
  return new Rectangle;
}

void Rectangle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    w_ = 0;
    h_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16000)) goto parse_y;
        break;
      }

      // required int32 y = 2000;
      case 2000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24000)) goto parse_w;
        break;
      }

      // required int32 w = 3000;
      case 3000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32000)) goto parse_h;
        break;
      }

      // required int32 h = 4000;
      case 4000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1000;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1000, this->x(), output);
  }

  // required int32 y = 2000;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2000, this->y(), output);
  }

  // required int32 w = 3000;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3000, this->w(), output);
  }

  // required int32 h = 4000;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4000, this->h(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rectangle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1000;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1000, this->x(), target);
  }

  // required int32 y = 2000;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2000, this->y(), target);
  }

  // required int32 w = 3000;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3000, this->w(), target);
  }

  // required int32 h = 4000;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4000, this->h(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rectangle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1000;
    if (has_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2000;
    if (has_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // required int32 w = 3000;
    if (has_w()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 4000;
    if (has_h()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rectangle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rectangle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rectangle_descriptor_;
  metadata.reflection = Rectangle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Size::kWFieldNumber;
const int Size::kHFieldNumber;
#endif  // !_MSC_VER

Size::Size()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Size::InitAsDefaultInstance() {
}

Size::Size(const Size& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Size::SharedCtor() {
  _cached_size_ = 0;
  w_ = 0;
  h_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Size::~Size() {
  SharedDtor();
}

void Size::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Size::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Size_descriptor_;
}

const Size& Size::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  return *default_instance_;
}

Size* Size::default_instance_ = NULL;

Size* Size::New() const {
  return new Size;
}

void Size::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    w_ = 0;
    h_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Size::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 w = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16000)) goto parse_h;
        break;
      }

      // required int32 h = 2000;
      case 2000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Size::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 w = 1000;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1000, this->w(), output);
  }

  // required int32 h = 2000;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2000, this->h(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Size::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 w = 1000;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1000, this->w(), target);
  }

  // required int32 h = 2000;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2000, this->h(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Size::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 w = 1000;
    if (has_w()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 2000;
    if (has_h()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Size* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Size*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Size::MergeFrom(const Size& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Size::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size::CopyFrom(const Size& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Size::Swap(Size* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Size::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Size_descriptor_;
  metadata.reflection = Size_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AtlasTexture::kUniqueIdFieldNumber;
const int AtlasTexture::kFilenameFieldNumber;
const int AtlasTexture::kFrameFieldNumber;
const int AtlasTexture::kRotatedFieldNumber;
const int AtlasTexture::kTrimmedFieldNumber;
const int AtlasTexture::kSpriteSourceSizeFieldNumber;
const int AtlasTexture::kSourceSizeFieldNumber;
#endif  // !_MSC_VER

AtlasTexture::AtlasTexture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AtlasTexture::InitAsDefaultInstance() {
  frame_ = const_cast< ::jc_res_atlas::Rectangle*>(&::jc_res_atlas::Rectangle::default_instance());
  spritesourcesize_ = const_cast< ::jc_res_atlas::Rectangle*>(&::jc_res_atlas::Rectangle::default_instance());
  sourcesize_ = const_cast< ::jc_res_atlas::Size*>(&::jc_res_atlas::Size::default_instance());
}

AtlasTexture::AtlasTexture(const AtlasTexture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AtlasTexture::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frame_ = NULL;
  rotated_ = false;
  trimmed_ = false;
  spritesourcesize_ = NULL;
  sourcesize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtlasTexture::~AtlasTexture() {
  SharedDtor();
}

void AtlasTexture::SharedDtor() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
    delete frame_;
    delete spritesourcesize_;
    delete sourcesize_;
  }
}

void AtlasTexture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AtlasTexture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtlasTexture_descriptor_;
}

const AtlasTexture& AtlasTexture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  return *default_instance_;
}

AtlasTexture* AtlasTexture::default_instance_ = NULL;

AtlasTexture* AtlasTexture::New() const {
  return new AtlasTexture;
}

void AtlasTexture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_frame()) {
      if (frame_ != NULL) frame_->::jc_res_atlas::Rectangle::Clear();
    }
    rotated_ = false;
    trimmed_ = false;
    if (has_spritesourcesize()) {
      if (spritesourcesize_ != NULL) spritesourcesize_->::jc_res_atlas::Rectangle::Clear();
    }
    if (has_sourcesize()) {
      if (sourcesize_ != NULL) sourcesize_->::jc_res_atlas::Size::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AtlasTexture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uniqueId = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16002)) goto parse_filename;
        break;
      }

      // required string filename = 2000;
      case 2000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24002)) goto parse_frame;
        break;
      }

      // required .jc_res_atlas.Rectangle frame = 3000;
      case 3000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32000)) goto parse_rotated;
        break;
      }

      // required bool rotated = 4000;
      case 4000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rotated_)));
          set_has_rotated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40000)) goto parse_trimmed;
        break;
      }

      // required bool trimmed = 5000;
      case 5000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trimmed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trimmed_)));
          set_has_trimmed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48002)) goto parse_spriteSourceSize;
        break;
      }

      // optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
      case 6000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spriteSourceSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spritesourcesize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56002)) goto parse_sourceSize;
        break;
      }

      // optional .jc_res_atlas.Size sourceSize = 7000;
      case 7000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sourcesize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AtlasTexture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uniqueId = 1000;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1000, this->uniqueid(), output);
  }

  // required string filename = 2000;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2000, this->filename(), output);
  }

  // required .jc_res_atlas.Rectangle frame = 3000;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3000, this->frame(), output);
  }

  // required bool rotated = 4000;
  if (has_rotated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4000, this->rotated(), output);
  }

  // required bool trimmed = 5000;
  if (has_trimmed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5000, this->trimmed(), output);
  }

  // optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
  if (has_spritesourcesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6000, this->spritesourcesize(), output);
  }

  // optional .jc_res_atlas.Size sourceSize = 7000;
  if (has_sourcesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7000, this->sourcesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AtlasTexture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uniqueId = 1000;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1000, this->uniqueid(), target);
  }

  // required string filename = 2000;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2000, this->filename(), target);
  }

  // required .jc_res_atlas.Rectangle frame = 3000;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3000, this->frame(), target);
  }

  // required bool rotated = 4000;
  if (has_rotated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4000, this->rotated(), target);
  }

  // required bool trimmed = 5000;
  if (has_trimmed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5000, this->trimmed(), target);
  }

  // optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
  if (has_spritesourcesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6000, this->spritesourcesize(), target);
  }

  // optional .jc_res_atlas.Size sourceSize = 7000;
  if (has_sourcesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7000, this->sourcesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AtlasTexture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniqueId = 1000;
    if (has_uniqueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // required string filename = 2000;
    if (has_filename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required .jc_res_atlas.Rectangle frame = 3000;
    if (has_frame()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frame());
    }

    // required bool rotated = 4000;
    if (has_rotated()) {
      total_size += 3 + 1;
    }

    // required bool trimmed = 5000;
    if (has_trimmed()) {
      total_size += 3 + 1;
    }

    // optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
    if (has_spritesourcesize()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spritesourcesize());
    }

    // optional .jc_res_atlas.Size sourceSize = 7000;
    if (has_sourcesize()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sourcesize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtlasTexture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AtlasTexture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AtlasTexture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AtlasTexture::MergeFrom(const AtlasTexture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_frame()) {
      mutable_frame()->::jc_res_atlas::Rectangle::MergeFrom(from.frame());
    }
    if (from.has_rotated()) {
      set_rotated(from.rotated());
    }
    if (from.has_trimmed()) {
      set_trimmed(from.trimmed());
    }
    if (from.has_spritesourcesize()) {
      mutable_spritesourcesize()->::jc_res_atlas::Rectangle::MergeFrom(from.spritesourcesize());
    }
    if (from.has_sourcesize()) {
      mutable_sourcesize()->::jc_res_atlas::Size::MergeFrom(from.sourcesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AtlasTexture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtlasTexture::CopyFrom(const AtlasTexture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtlasTexture::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_frame()) {
    if (!this->frame().IsInitialized()) return false;
  }
  if (has_spritesourcesize()) {
    if (!this->spritesourcesize().IsInitialized()) return false;
  }
  if (has_sourcesize()) {
    if (!this->sourcesize().IsInitialized()) return false;
  }
  return true;
}

void AtlasTexture::Swap(AtlasTexture* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(filename_, other->filename_);
    std::swap(frame_, other->frame_);
    std::swap(rotated_, other->rotated_);
    std::swap(trimmed_, other->trimmed_);
    std::swap(spritesourcesize_, other->spritesourcesize_);
    std::swap(sourcesize_, other->sourcesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AtlasTexture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AtlasTexture_descriptor_;
  metadata.reflection = AtlasTexture_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AtlasGroup_PixelFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtlasGroup_PixelFormat_descriptor_;
}
bool AtlasGroup_PixelFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AtlasGroup_PixelFormat AtlasGroup::RGBA8888;
const AtlasGroup_PixelFormat AtlasGroup::RGB888;
const AtlasGroup_PixelFormat AtlasGroup::RGB565;
const AtlasGroup_PixelFormat AtlasGroup::RGBA4444;
const AtlasGroup_PixelFormat AtlasGroup::RGB5551;
const AtlasGroup_PixelFormat AtlasGroup::PixelFormat_MIN;
const AtlasGroup_PixelFormat AtlasGroup::PixelFormat_MAX;
const int AtlasGroup::PixelFormat_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AtlasGroup::kUniqueIdFieldNumber;
const int AtlasGroup::kImagesFieldNumber;
const int AtlasGroup::kFilenameFieldNumber;
const int AtlasGroup::kScaleFieldNumber;
const int AtlasGroup::kImportPixelFormatFieldNumber;
#endif  // !_MSC_VER

AtlasGroup::AtlasGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AtlasGroup::InitAsDefaultInstance() {
}

AtlasGroup::AtlasGroup(const AtlasGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AtlasGroup::SharedCtor() {
  _cached_size_ = 0;
  uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scale_ = 0;
  importpixelformat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AtlasGroup::~AtlasGroup() {
  SharedDtor();
}

void AtlasGroup::SharedDtor() {
  if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqueid_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void AtlasGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AtlasGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AtlasGroup_descriptor_;
}

const AtlasGroup& AtlasGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idl_2fatlas_2fTextureAtlasData_2eproto();
  return *default_instance_;
}

AtlasGroup* AtlasGroup::default_instance_ = NULL;

AtlasGroup* AtlasGroup::New() const {
  return new AtlasGroup;
}

void AtlasGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uniqueid()) {
      if (uniqueid_ != &::google::protobuf::internal::kEmptyString) {
        uniqueid_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    scale_ = 0;
    importpixelformat_ = 0;
  }
  images_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AtlasGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uniqueId = 1000;
      case 1000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqueid().data(), this->uniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16002)) goto parse_images;
        break;
      }

      // repeated .jc_res_atlas.AtlasTexture images = 2000;
      case 2000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_images:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16002)) goto parse_images;
        if (input->ExpectTag(24002)) goto parse_filename;
        break;
      }

      // required string filename = 3000;
      case 3000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32005)) goto parse_scale;
        break;
      }

      // optional float scale = 4000;
      case 4000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40000)) goto parse_importPixelFormat;
        break;
      }

      // optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
      case 5000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_importPixelFormat:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jc_res_atlas::AtlasGroup_PixelFormat_IsValid(value)) {
            set_importpixelformat(static_cast< ::jc_res_atlas::AtlasGroup_PixelFormat >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5000, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AtlasGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uniqueId = 1000;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1000, this->uniqueid(), output);
  }

  // repeated .jc_res_atlas.AtlasTexture images = 2000;
  for (int i = 0; i < this->images_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2000, this->images(i), output);
  }

  // required string filename = 3000;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3000, this->filename(), output);
  }

  // optional float scale = 4000;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4000, this->scale(), output);
  }

  // optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
  if (has_importpixelformat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5000, this->importpixelformat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AtlasGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uniqueId = 1000;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqueid().data(), this->uniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1000, this->uniqueid(), target);
  }

  // repeated .jc_res_atlas.AtlasTexture images = 2000;
  for (int i = 0; i < this->images_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2000, this->images(i), target);
  }

  // required string filename = 3000;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3000, this->filename(), target);
  }

  // optional float scale = 4000;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4000, this->scale(), target);
  }

  // optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
  if (has_importpixelformat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5000, this->importpixelformat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AtlasGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uniqueId = 1000;
    if (has_uniqueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqueid());
    }

    // required string filename = 3000;
    if (has_filename()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional float scale = 4000;
    if (has_scale()) {
      total_size += 3 + 4;
    }

    // optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
    if (has_importpixelformat()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->importpixelformat());
    }

  }
  // repeated .jc_res_atlas.AtlasTexture images = 2000;
  total_size += 2 * this->images_size();
  for (int i = 0; i < this->images_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AtlasGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AtlasGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AtlasGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AtlasGroup::MergeFrom(const AtlasGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_.MergeFrom(from.images_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_importpixelformat()) {
      set_importpixelformat(from.importpixelformat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AtlasGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AtlasGroup::CopyFrom(const AtlasGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtlasGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < images_size(); i++) {
    if (!this->images(i).IsInitialized()) return false;
  }
  return true;
}

void AtlasGroup::Swap(AtlasGroup* other) {
  if (other != this) {
    std::swap(uniqueid_, other->uniqueid_);
    images_.Swap(&other->images_);
    std::swap(filename_, other->filename_);
    std::swap(scale_, other->scale_);
    std::swap(importpixelformat_, other->importpixelformat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AtlasGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AtlasGroup_descriptor_;
  metadata.reflection = AtlasGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace jc_res_atlas

// @@protoc_insertion_point(global_scope)
