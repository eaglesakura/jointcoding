// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idl/atlas/TextureAtlasData.proto

package com.eaglesakura.resource.texture.atlas;

public final class TextureAtlasData {
  private TextureAtlasData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RectangleOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 x = 1000;
    /**
     * <code>required int32 x = 1000;</code>
     */
    boolean hasX();
    /**
     * <code>required int32 x = 1000;</code>
     */
    int getX();

    // required int32 y = 2000;
    /**
     * <code>required int32 y = 2000;</code>
     */
    boolean hasY();
    /**
     * <code>required int32 y = 2000;</code>
     */
    int getY();

    // required int32 w = 3000;
    /**
     * <code>required int32 w = 3000;</code>
     */
    boolean hasW();
    /**
     * <code>required int32 w = 3000;</code>
     */
    int getW();

    // required int32 h = 4000;
    /**
     * <code>required int32 h = 4000;</code>
     */
    boolean hasH();
    /**
     * <code>required int32 h = 4000;</code>
     */
    int getH();
  }
  /**
   * Protobuf type {@code jc_res_atlas.Rectangle}
   *
   * <pre>
   * 四角形
   * </pre>
   */
  public static final class Rectangle extends
      com.google.protobuf.GeneratedMessage
      implements RectangleOrBuilder {
    // Use Rectangle.newBuilder() to construct.
    private Rectangle(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Rectangle(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Rectangle defaultInstance;
    public static Rectangle getDefaultInstance() {
      return defaultInstance;
    }

    public Rectangle getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Rectangle(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8000: {
              bitField0_ |= 0x00000001;
              x_ = input.readInt32();
              break;
            }
            case 16000: {
              bitField0_ |= 0x00000002;
              y_ = input.readInt32();
              break;
            }
            case 24000: {
              bitField0_ |= 0x00000004;
              w_ = input.readInt32();
              break;
            }
            case 32000: {
              bitField0_ |= 0x00000008;
              h_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Rectangle_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Rectangle_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.class, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder.class);
    }

    public static com.google.protobuf.Parser<Rectangle> PARSER =
        new com.google.protobuf.AbstractParser<Rectangle>() {
      public Rectangle parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Rectangle(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Rectangle> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 x = 1000;
    public static final int X_FIELD_NUMBER = 1000;
    private int x_;
    /**
     * <code>required int32 x = 1000;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 x = 1000;</code>
     */
    public int getX() {
      return x_;
    }

    // required int32 y = 2000;
    public static final int Y_FIELD_NUMBER = 2000;
    private int y_;
    /**
     * <code>required int32 y = 2000;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 y = 2000;</code>
     */
    public int getY() {
      return y_;
    }

    // required int32 w = 3000;
    public static final int W_FIELD_NUMBER = 3000;
    private int w_;
    /**
     * <code>required int32 w = 3000;</code>
     */
    public boolean hasW() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 w = 3000;</code>
     */
    public int getW() {
      return w_;
    }

    // required int32 h = 4000;
    public static final int H_FIELD_NUMBER = 4000;
    private int h_;
    /**
     * <code>required int32 h = 4000;</code>
     */
    public boolean hasH() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 h = 4000;</code>
     */
    public int getH() {
      return h_;
    }

    private void initFields() {
      x_ = 0;
      y_ = 0;
      w_ = 0;
      h_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasW()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1000, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2000, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3000, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4000, h_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1000, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2000, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3000, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4000, h_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code jc_res_atlas.Rectangle}
     *
     * <pre>
     * 四角形
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Rectangle_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Rectangle_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.class, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder.class);
      }

      // Construct using com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        w_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        h_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Rectangle_descriptor;
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle getDefaultInstanceForType() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle build() {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle buildPartial() {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle result = new com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.w_ = w_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.h_ = h_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle) {
          return mergeFrom((com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle other) {
        if (other == com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasW()) {
          setW(other.getW());
        }
        if (other.hasH()) {
          setH(other.getH());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasW()) {
          
          return false;
        }
        if (!hasH()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 x = 1000;
      private int x_ ;
      /**
       * <code>required int32 x = 1000;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 x = 1000;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required int32 x = 1000;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 x = 1000;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        onChanged();
        return this;
      }

      // required int32 y = 2000;
      private int y_ ;
      /**
       * <code>required int32 y = 2000;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 y = 2000;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>required int32 y = 2000;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 y = 2000;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        onChanged();
        return this;
      }

      // required int32 w = 3000;
      private int w_ ;
      /**
       * <code>required int32 w = 3000;</code>
       */
      public boolean hasW() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 w = 3000;</code>
       */
      public int getW() {
        return w_;
      }
      /**
       * <code>required int32 w = 3000;</code>
       */
      public Builder setW(int value) {
        bitField0_ |= 0x00000004;
        w_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 w = 3000;</code>
       */
      public Builder clearW() {
        bitField0_ = (bitField0_ & ~0x00000004);
        w_ = 0;
        onChanged();
        return this;
      }

      // required int32 h = 4000;
      private int h_ ;
      /**
       * <code>required int32 h = 4000;</code>
       */
      public boolean hasH() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 h = 4000;</code>
       */
      public int getH() {
        return h_;
      }
      /**
       * <code>required int32 h = 4000;</code>
       */
      public Builder setH(int value) {
        bitField0_ |= 0x00000008;
        h_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 h = 4000;</code>
       */
      public Builder clearH() {
        bitField0_ = (bitField0_ & ~0x00000008);
        h_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:jc_res_atlas.Rectangle)
    }

    static {
      defaultInstance = new Rectangle(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:jc_res_atlas.Rectangle)
  }

  public interface SizeOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 w = 1000;
    /**
     * <code>required int32 w = 1000;</code>
     */
    boolean hasW();
    /**
     * <code>required int32 w = 1000;</code>
     */
    int getW();

    // required int32 h = 2000;
    /**
     * <code>required int32 h = 2000;</code>
     */
    boolean hasH();
    /**
     * <code>required int32 h = 2000;</code>
     */
    int getH();
  }
  /**
   * Protobuf type {@code jc_res_atlas.Size}
   *
   * <pre>
   * アトラス化された画像
   * </pre>
   */
  public static final class Size extends
      com.google.protobuf.GeneratedMessage
      implements SizeOrBuilder {
    // Use Size.newBuilder() to construct.
    private Size(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Size(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Size defaultInstance;
    public static Size getDefaultInstance() {
      return defaultInstance;
    }

    public Size getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Size(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8000: {
              bitField0_ |= 0x00000001;
              w_ = input.readInt32();
              break;
            }
            case 16000: {
              bitField0_ |= 0x00000002;
              h_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Size_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Size_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.class, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.Builder.class);
    }

    public static com.google.protobuf.Parser<Size> PARSER =
        new com.google.protobuf.AbstractParser<Size>() {
      public Size parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Size(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Size> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 w = 1000;
    public static final int W_FIELD_NUMBER = 1000;
    private int w_;
    /**
     * <code>required int32 w = 1000;</code>
     */
    public boolean hasW() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 w = 1000;</code>
     */
    public int getW() {
      return w_;
    }

    // required int32 h = 2000;
    public static final int H_FIELD_NUMBER = 2000;
    private int h_;
    /**
     * <code>required int32 h = 2000;</code>
     */
    public boolean hasH() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 h = 2000;</code>
     */
    public int getH() {
      return h_;
    }

    private void initFields() {
      w_ = 0;
      h_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasW()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1000, w_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2000, h_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1000, w_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2000, h_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code jc_res_atlas.Size}
     *
     * <pre>
     * アトラス化された画像
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eaglesakura.resource.texture.atlas.TextureAtlasData.SizeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Size_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Size_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.class, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.Builder.class);
      }

      // Construct using com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        w_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        h_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_Size_descriptor;
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size getDefaultInstanceForType() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.getDefaultInstance();
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size build() {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size buildPartial() {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size result = new com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.w_ = w_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.h_ = h_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size) {
          return mergeFrom((com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size other) {
        if (other == com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.getDefaultInstance()) return this;
        if (other.hasW()) {
          setW(other.getW());
        }
        if (other.hasH()) {
          setH(other.getH());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasW()) {
          
          return false;
        }
        if (!hasH()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 w = 1000;
      private int w_ ;
      /**
       * <code>required int32 w = 1000;</code>
       */
      public boolean hasW() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 w = 1000;</code>
       */
      public int getW() {
        return w_;
      }
      /**
       * <code>required int32 w = 1000;</code>
       */
      public Builder setW(int value) {
        bitField0_ |= 0x00000001;
        w_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 w = 1000;</code>
       */
      public Builder clearW() {
        bitField0_ = (bitField0_ & ~0x00000001);
        w_ = 0;
        onChanged();
        return this;
      }

      // required int32 h = 2000;
      private int h_ ;
      /**
       * <code>required int32 h = 2000;</code>
       */
      public boolean hasH() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 h = 2000;</code>
       */
      public int getH() {
        return h_;
      }
      /**
       * <code>required int32 h = 2000;</code>
       */
      public Builder setH(int value) {
        bitField0_ |= 0x00000002;
        h_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 h = 2000;</code>
       */
      public Builder clearH() {
        bitField0_ = (bitField0_ & ~0x00000002);
        h_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:jc_res_atlas.Size)
    }

    static {
      defaultInstance = new Size(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:jc_res_atlas.Size)
  }

  public interface AtlasTextureOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string uniqueId = 1000;
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * unique ID
     * </pre>
     */
    boolean hasUniqueId();
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * unique ID
     * </pre>
     */
    java.lang.String getUniqueId();
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * unique ID
     * </pre>
     */
    com.google.protobuf.ByteString
        getUniqueIdBytes();

    // required string filename = 2000;
    /**
     * <code>required string filename = 2000;</code>
     *
     * <pre>
     * Origin Filename.
     * 拡張子は取り除かれる
     * </pre>
     */
    boolean hasFilename();
    /**
     * <code>required string filename = 2000;</code>
     *
     * <pre>
     * Origin Filename.
     * 拡張子は取り除かれる
     * </pre>
     */
    java.lang.String getFilename();
    /**
     * <code>required string filename = 2000;</code>
     *
     * <pre>
     * Origin Filename.
     * 拡張子は取り除かれる
     * </pre>
     */
    com.google.protobuf.ByteString
        getFilenameBytes();

    // required .jc_res_atlas.Rectangle frame = 3000;
    /**
     * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
     *
     * <pre>
     * アトラスグループ内のテクスチャ位置
     * </pre>
     */
    boolean hasFrame();
    /**
     * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
     *
     * <pre>
     * アトラスグループ内のテクスチャ位置
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle getFrame();
    /**
     * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
     *
     * <pre>
     * アトラスグループ内のテクスチャ位置
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder getFrameOrBuilder();

    // required bool rotated = 4000;
    /**
     * <code>required bool rotated = 4000;</code>
     *
     * <pre>
     * テクスチャが縦回転させられていたらtrue
     * </pre>
     */
    boolean hasRotated();
    /**
     * <code>required bool rotated = 4000;</code>
     *
     * <pre>
     * テクスチャが縦回転させられていたらtrue
     * </pre>
     */
    boolean getRotated();

    // required bool trimmed = 5000;
    /**
     * <code>required bool trimmed = 5000;</code>
     *
     * <pre>
     * トリミング済みであればtrue
     * </pre>
     */
    boolean hasTrimmed();
    /**
     * <code>required bool trimmed = 5000;</code>
     *
     * <pre>
     * トリミング済みであればtrue
     * </pre>
     */
    boolean getTrimmed();

    // optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
    /**
     * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
     *
     * <pre>
     * </pre>
     */
    boolean hasSpriteSourceSize();
    /**
     * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
     *
     * <pre>
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle getSpriteSourceSize();
    /**
     * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
     *
     * <pre>
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder getSpriteSourceSizeOrBuilder();

    // optional .jc_res_atlas.Size sourceSize = 7000;
    /**
     * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
     *
     * <pre>
     * 元画像サイズ
     * </pre>
     */
    boolean hasSourceSize();
    /**
     * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
     *
     * <pre>
     * 元画像サイズ
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size getSourceSize();
    /**
     * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
     *
     * <pre>
     * 元画像サイズ
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.SizeOrBuilder getSourceSizeOrBuilder();
  }
  /**
   * Protobuf type {@code jc_res_atlas.AtlasTexture}
   *
   * <pre>
   * ATLAS化された各画像を示す
   * </pre>
   */
  public static final class AtlasTexture extends
      com.google.protobuf.GeneratedMessage
      implements AtlasTextureOrBuilder {
    // Use AtlasTexture.newBuilder() to construct.
    private AtlasTexture(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AtlasTexture(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AtlasTexture defaultInstance;
    public static AtlasTexture getDefaultInstance() {
      return defaultInstance;
    }

    public AtlasTexture getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AtlasTexture(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8002: {
              bitField0_ |= 0x00000001;
              uniqueId_ = input.readBytes();
              break;
            }
            case 16002: {
              bitField0_ |= 0x00000002;
              filename_ = input.readBytes();
              break;
            }
            case 24002: {
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = frame_.toBuilder();
              }
              frame_ = input.readMessage(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(frame_);
                frame_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 32000: {
              bitField0_ |= 0x00000008;
              rotated_ = input.readBool();
              break;
            }
            case 40000: {
              bitField0_ |= 0x00000010;
              trimmed_ = input.readBool();
              break;
            }
            case 48002: {
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = spriteSourceSize_.toBuilder();
              }
              spriteSourceSize_ = input.readMessage(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(spriteSourceSize_);
                spriteSourceSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 56002: {
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = sourceSize_.toBuilder();
              }
              sourceSize_ = input.readMessage(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sourceSize_);
                sourceSize_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasTexture_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasTexture_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.class, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder.class);
    }

    public static com.google.protobuf.Parser<AtlasTexture> PARSER =
        new com.google.protobuf.AbstractParser<AtlasTexture>() {
      public AtlasTexture parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AtlasTexture(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AtlasTexture> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string uniqueId = 1000;
    public static final int UNIQUEID_FIELD_NUMBER = 1000;
    private java.lang.Object uniqueId_;
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * unique ID
     * </pre>
     */
    public boolean hasUniqueId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * unique ID
     * </pre>
     */
    public java.lang.String getUniqueId() {
      java.lang.Object ref = uniqueId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          uniqueId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * unique ID
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUniqueIdBytes() {
      java.lang.Object ref = uniqueId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uniqueId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required string filename = 2000;
    public static final int FILENAME_FIELD_NUMBER = 2000;
    private java.lang.Object filename_;
    /**
     * <code>required string filename = 2000;</code>
     *
     * <pre>
     * Origin Filename.
     * 拡張子は取り除かれる
     * </pre>
     */
    public boolean hasFilename() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string filename = 2000;</code>
     *
     * <pre>
     * Origin Filename.
     * 拡張子は取り除かれる
     * </pre>
     */
    public java.lang.String getFilename() {
      java.lang.Object ref = filename_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          filename_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string filename = 2000;</code>
     *
     * <pre>
     * Origin Filename.
     * 拡張子は取り除かれる
     * </pre>
     */
    public com.google.protobuf.ByteString
        getFilenameBytes() {
      java.lang.Object ref = filename_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        filename_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required .jc_res_atlas.Rectangle frame = 3000;
    public static final int FRAME_FIELD_NUMBER = 3000;
    private com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle frame_;
    /**
     * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
     *
     * <pre>
     * アトラスグループ内のテクスチャ位置
     * </pre>
     */
    public boolean hasFrame() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
     *
     * <pre>
     * アトラスグループ内のテクスチャ位置
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle getFrame() {
      return frame_;
    }
    /**
     * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
     *
     * <pre>
     * アトラスグループ内のテクスチャ位置
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder getFrameOrBuilder() {
      return frame_;
    }

    // required bool rotated = 4000;
    public static final int ROTATED_FIELD_NUMBER = 4000;
    private boolean rotated_;
    /**
     * <code>required bool rotated = 4000;</code>
     *
     * <pre>
     * テクスチャが縦回転させられていたらtrue
     * </pre>
     */
    public boolean hasRotated() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required bool rotated = 4000;</code>
     *
     * <pre>
     * テクスチャが縦回転させられていたらtrue
     * </pre>
     */
    public boolean getRotated() {
      return rotated_;
    }

    // required bool trimmed = 5000;
    public static final int TRIMMED_FIELD_NUMBER = 5000;
    private boolean trimmed_;
    /**
     * <code>required bool trimmed = 5000;</code>
     *
     * <pre>
     * トリミング済みであればtrue
     * </pre>
     */
    public boolean hasTrimmed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bool trimmed = 5000;</code>
     *
     * <pre>
     * トリミング済みであればtrue
     * </pre>
     */
    public boolean getTrimmed() {
      return trimmed_;
    }

    // optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
    public static final int SPRITESOURCESIZE_FIELD_NUMBER = 6000;
    private com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle spriteSourceSize_;
    /**
     * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
     *
     * <pre>
     * </pre>
     */
    public boolean hasSpriteSourceSize() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
     *
     * <pre>
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle getSpriteSourceSize() {
      return spriteSourceSize_;
    }
    /**
     * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
     *
     * <pre>
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder getSpriteSourceSizeOrBuilder() {
      return spriteSourceSize_;
    }

    // optional .jc_res_atlas.Size sourceSize = 7000;
    public static final int SOURCESIZE_FIELD_NUMBER = 7000;
    private com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size sourceSize_;
    /**
     * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
     *
     * <pre>
     * 元画像サイズ
     * </pre>
     */
    public boolean hasSourceSize() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
     *
     * <pre>
     * 元画像サイズ
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size getSourceSize() {
      return sourceSize_;
    }
    /**
     * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
     *
     * <pre>
     * 元画像サイズ
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.SizeOrBuilder getSourceSizeOrBuilder() {
      return sourceSize_;
    }

    private void initFields() {
      uniqueId_ = "";
      filename_ = "";
      frame_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
      rotated_ = false;
      trimmed_ = false;
      spriteSourceSize_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
      sourceSize_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasUniqueId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFilename()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFrame()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRotated()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTrimmed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFrame().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasSpriteSourceSize()) {
        if (!getSpriteSourceSize().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSourceSize()) {
        if (!getSourceSize().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1000, getUniqueIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2000, getFilenameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3000, frame_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4000, rotated_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5000, trimmed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6000, spriteSourceSize_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7000, sourceSize_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1000, getUniqueIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2000, getFilenameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3000, frame_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4000, rotated_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5000, trimmed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6000, spriteSourceSize_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7000, sourceSize_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code jc_res_atlas.AtlasTexture}
     *
     * <pre>
     * ATLAS化された各画像を示す
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasTexture_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasTexture_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.class, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder.class);
      }

      // Construct using com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFrameFieldBuilder();
          getSpriteSourceSizeFieldBuilder();
          getSourceSizeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        uniqueId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        filename_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (frameBuilder_ == null) {
          frame_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
        } else {
          frameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        rotated_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        trimmed_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (spriteSourceSizeBuilder_ == null) {
          spriteSourceSize_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
        } else {
          spriteSourceSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (sourceSizeBuilder_ == null) {
          sourceSize_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.getDefaultInstance();
        } else {
          sourceSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasTexture_descriptor;
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture getDefaultInstanceForType() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.getDefaultInstance();
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture build() {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture buildPartial() {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture result = new com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.uniqueId_ = uniqueId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.filename_ = filename_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (frameBuilder_ == null) {
          result.frame_ = frame_;
        } else {
          result.frame_ = frameBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rotated_ = rotated_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.trimmed_ = trimmed_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (spriteSourceSizeBuilder_ == null) {
          result.spriteSourceSize_ = spriteSourceSize_;
        } else {
          result.spriteSourceSize_ = spriteSourceSizeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (sourceSizeBuilder_ == null) {
          result.sourceSize_ = sourceSize_;
        } else {
          result.sourceSize_ = sourceSizeBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture) {
          return mergeFrom((com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture other) {
        if (other == com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.getDefaultInstance()) return this;
        if (other.hasUniqueId()) {
          bitField0_ |= 0x00000001;
          uniqueId_ = other.uniqueId_;
          onChanged();
        }
        if (other.hasFilename()) {
          bitField0_ |= 0x00000002;
          filename_ = other.filename_;
          onChanged();
        }
        if (other.hasFrame()) {
          mergeFrame(other.getFrame());
        }
        if (other.hasRotated()) {
          setRotated(other.getRotated());
        }
        if (other.hasTrimmed()) {
          setTrimmed(other.getTrimmed());
        }
        if (other.hasSpriteSourceSize()) {
          mergeSpriteSourceSize(other.getSpriteSourceSize());
        }
        if (other.hasSourceSize()) {
          mergeSourceSize(other.getSourceSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasUniqueId()) {
          
          return false;
        }
        if (!hasFilename()) {
          
          return false;
        }
        if (!hasFrame()) {
          
          return false;
        }
        if (!hasRotated()) {
          
          return false;
        }
        if (!hasTrimmed()) {
          
          return false;
        }
        if (!getFrame().isInitialized()) {
          
          return false;
        }
        if (hasSpriteSourceSize()) {
          if (!getSpriteSourceSize().isInitialized()) {
            
            return false;
          }
        }
        if (hasSourceSize()) {
          if (!getSourceSize().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string uniqueId = 1000;
      private java.lang.Object uniqueId_ = "";
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * unique ID
       * </pre>
       */
      public boolean hasUniqueId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * unique ID
       * </pre>
       */
      public java.lang.String getUniqueId() {
        java.lang.Object ref = uniqueId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          uniqueId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * unique ID
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUniqueIdBytes() {
        java.lang.Object ref = uniqueId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uniqueId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * unique ID
       * </pre>
       */
      public Builder setUniqueId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        uniqueId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * unique ID
       * </pre>
       */
      public Builder clearUniqueId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        uniqueId_ = getDefaultInstance().getUniqueId();
        onChanged();
        return this;
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * unique ID
       * </pre>
       */
      public Builder setUniqueIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        uniqueId_ = value;
        onChanged();
        return this;
      }

      // required string filename = 2000;
      private java.lang.Object filename_ = "";
      /**
       * <code>required string filename = 2000;</code>
       *
       * <pre>
       * Origin Filename.
       * 拡張子は取り除かれる
       * </pre>
       */
      public boolean hasFilename() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required string filename = 2000;</code>
       *
       * <pre>
       * Origin Filename.
       * 拡張子は取り除かれる
       * </pre>
       */
      public java.lang.String getFilename() {
        java.lang.Object ref = filename_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          filename_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string filename = 2000;</code>
       *
       * <pre>
       * Origin Filename.
       * 拡張子は取り除かれる
       * </pre>
       */
      public com.google.protobuf.ByteString
          getFilenameBytes() {
        java.lang.Object ref = filename_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          filename_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string filename = 2000;</code>
       *
       * <pre>
       * Origin Filename.
       * 拡張子は取り除かれる
       * </pre>
       */
      public Builder setFilename(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        filename_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string filename = 2000;</code>
       *
       * <pre>
       * Origin Filename.
       * 拡張子は取り除かれる
       * </pre>
       */
      public Builder clearFilename() {
        bitField0_ = (bitField0_ & ~0x00000002);
        filename_ = getDefaultInstance().getFilename();
        onChanged();
        return this;
      }
      /**
       * <code>required string filename = 2000;</code>
       *
       * <pre>
       * Origin Filename.
       * 拡張子は取り除かれる
       * </pre>
       */
      public Builder setFilenameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        filename_ = value;
        onChanged();
        return this;
      }

      // required .jc_res_atlas.Rectangle frame = 3000;
      private com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle frame_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder> frameBuilder_;
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      public boolean hasFrame() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle getFrame() {
        if (frameBuilder_ == null) {
          return frame_;
        } else {
          return frameBuilder_.getMessage();
        }
      }
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      public Builder setFrame(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle value) {
        if (frameBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          frame_ = value;
          onChanged();
        } else {
          frameBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      public Builder setFrame(
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder builderForValue) {
        if (frameBuilder_ == null) {
          frame_ = builderForValue.build();
          onChanged();
        } else {
          frameBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      public Builder mergeFrame(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle value) {
        if (frameBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              frame_ != com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance()) {
            frame_ =
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.newBuilder(frame_).mergeFrom(value).buildPartial();
          } else {
            frame_ = value;
          }
          onChanged();
        } else {
          frameBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      public Builder clearFrame() {
        if (frameBuilder_ == null) {
          frame_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
          onChanged();
        } else {
          frameBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder getFrameBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFrameFieldBuilder().getBuilder();
      }
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder getFrameOrBuilder() {
        if (frameBuilder_ != null) {
          return frameBuilder_.getMessageOrBuilder();
        } else {
          return frame_;
        }
      }
      /**
       * <code>required .jc_res_atlas.Rectangle frame = 3000;</code>
       *
       * <pre>
       * アトラスグループ内のテクスチャ位置
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder> 
          getFrameFieldBuilder() {
        if (frameBuilder_ == null) {
          frameBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder>(
                  frame_,
                  getParentForChildren(),
                  isClean());
          frame_ = null;
        }
        return frameBuilder_;
      }

      // required bool rotated = 4000;
      private boolean rotated_ ;
      /**
       * <code>required bool rotated = 4000;</code>
       *
       * <pre>
       * テクスチャが縦回転させられていたらtrue
       * </pre>
       */
      public boolean hasRotated() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required bool rotated = 4000;</code>
       *
       * <pre>
       * テクスチャが縦回転させられていたらtrue
       * </pre>
       */
      public boolean getRotated() {
        return rotated_;
      }
      /**
       * <code>required bool rotated = 4000;</code>
       *
       * <pre>
       * テクスチャが縦回転させられていたらtrue
       * </pre>
       */
      public Builder setRotated(boolean value) {
        bitField0_ |= 0x00000008;
        rotated_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool rotated = 4000;</code>
       *
       * <pre>
       * テクスチャが縦回転させられていたらtrue
       * </pre>
       */
      public Builder clearRotated() {
        bitField0_ = (bitField0_ & ~0x00000008);
        rotated_ = false;
        onChanged();
        return this;
      }

      // required bool trimmed = 5000;
      private boolean trimmed_ ;
      /**
       * <code>required bool trimmed = 5000;</code>
       *
       * <pre>
       * トリミング済みであればtrue
       * </pre>
       */
      public boolean hasTrimmed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bool trimmed = 5000;</code>
       *
       * <pre>
       * トリミング済みであればtrue
       * </pre>
       */
      public boolean getTrimmed() {
        return trimmed_;
      }
      /**
       * <code>required bool trimmed = 5000;</code>
       *
       * <pre>
       * トリミング済みであればtrue
       * </pre>
       */
      public Builder setTrimmed(boolean value) {
        bitField0_ |= 0x00000010;
        trimmed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool trimmed = 5000;</code>
       *
       * <pre>
       * トリミング済みであればtrue
       * </pre>
       */
      public Builder clearTrimmed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        trimmed_ = false;
        onChanged();
        return this;
      }

      // optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;
      private com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle spriteSourceSize_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder> spriteSourceSizeBuilder_;
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      public boolean hasSpriteSourceSize() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle getSpriteSourceSize() {
        if (spriteSourceSizeBuilder_ == null) {
          return spriteSourceSize_;
        } else {
          return spriteSourceSizeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setSpriteSourceSize(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle value) {
        if (spriteSourceSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          spriteSourceSize_ = value;
          onChanged();
        } else {
          spriteSourceSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder setSpriteSourceSize(
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder builderForValue) {
        if (spriteSourceSizeBuilder_ == null) {
          spriteSourceSize_ = builderForValue.build();
          onChanged();
        } else {
          spriteSourceSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder mergeSpriteSourceSize(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle value) {
        if (spriteSourceSizeBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              spriteSourceSize_ != com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance()) {
            spriteSourceSize_ =
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.newBuilder(spriteSourceSize_).mergeFrom(value).buildPartial();
          } else {
            spriteSourceSize_ = value;
          }
          onChanged();
        } else {
          spriteSourceSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      public Builder clearSpriteSourceSize() {
        if (spriteSourceSizeBuilder_ == null) {
          spriteSourceSize_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.getDefaultInstance();
          onChanged();
        } else {
          spriteSourceSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder getSpriteSourceSizeBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getSpriteSourceSizeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder getSpriteSourceSizeOrBuilder() {
        if (spriteSourceSizeBuilder_ != null) {
          return spriteSourceSizeBuilder_.getMessageOrBuilder();
        } else {
          return spriteSourceSize_;
        }
      }
      /**
       * <code>optional .jc_res_atlas.Rectangle spriteSourceSize = 6000;</code>
       *
       * <pre>
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder> 
          getSpriteSourceSizeFieldBuilder() {
        if (spriteSourceSizeBuilder_ == null) {
          spriteSourceSizeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Rectangle.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.RectangleOrBuilder>(
                  spriteSourceSize_,
                  getParentForChildren(),
                  isClean());
          spriteSourceSize_ = null;
        }
        return spriteSourceSizeBuilder_;
      }

      // optional .jc_res_atlas.Size sourceSize = 7000;
      private com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size sourceSize_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.SizeOrBuilder> sourceSizeBuilder_;
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      public boolean hasSourceSize() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size getSourceSize() {
        if (sourceSizeBuilder_ == null) {
          return sourceSize_;
        } else {
          return sourceSizeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      public Builder setSourceSize(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size value) {
        if (sourceSizeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sourceSize_ = value;
          onChanged();
        } else {
          sourceSizeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      public Builder setSourceSize(
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.Builder builderForValue) {
        if (sourceSizeBuilder_ == null) {
          sourceSize_ = builderForValue.build();
          onChanged();
        } else {
          sourceSizeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      public Builder mergeSourceSize(com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size value) {
        if (sourceSizeBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              sourceSize_ != com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.getDefaultInstance()) {
            sourceSize_ =
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.newBuilder(sourceSize_).mergeFrom(value).buildPartial();
          } else {
            sourceSize_ = value;
          }
          onChanged();
        } else {
          sourceSizeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      public Builder clearSourceSize() {
        if (sourceSizeBuilder_ == null) {
          sourceSize_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.getDefaultInstance();
          onChanged();
        } else {
          sourceSizeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.Builder getSourceSizeBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getSourceSizeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.SizeOrBuilder getSourceSizeOrBuilder() {
        if (sourceSizeBuilder_ != null) {
          return sourceSizeBuilder_.getMessageOrBuilder();
        } else {
          return sourceSize_;
        }
      }
      /**
       * <code>optional .jc_res_atlas.Size sourceSize = 7000;</code>
       *
       * <pre>
       * 元画像サイズ
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.SizeOrBuilder> 
          getSourceSizeFieldBuilder() {
        if (sourceSizeBuilder_ == null) {
          sourceSizeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size, com.eaglesakura.resource.texture.atlas.TextureAtlasData.Size.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.SizeOrBuilder>(
                  sourceSize_,
                  getParentForChildren(),
                  isClean());
          sourceSize_ = null;
        }
        return sourceSizeBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:jc_res_atlas.AtlasTexture)
    }

    static {
      defaultInstance = new AtlasTexture(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:jc_res_atlas.AtlasTexture)
  }

  public interface AtlasGroupOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string uniqueId = 1000;
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * 識別子
     * </pre>
     */
    boolean hasUniqueId();
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * 識別子
     * </pre>
     */
    java.lang.String getUniqueId();
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * 識別子
     * </pre>
     */
    com.google.protobuf.ByteString
        getUniqueIdBytes();

    // repeated .jc_res_atlas.AtlasTexture images = 2000;
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    java.util.List<com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture> 
        getImagesList();
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture getImages(int index);
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    int getImagesCount();
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    java.util.List<? extends com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder> 
        getImagesOrBuilderList();
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder getImagesOrBuilder(
        int index);

    // required string filename = 3000;
    /**
     * <code>required string filename = 3000;</code>
     *
     * <pre>
     * 画像ファイル名
     * 拡張子は取り除かれる
     * </pre>
     */
    boolean hasFilename();
    /**
     * <code>required string filename = 3000;</code>
     *
     * <pre>
     * 画像ファイル名
     * 拡張子は取り除かれる
     * </pre>
     */
    java.lang.String getFilename();
    /**
     * <code>required string filename = 3000;</code>
     *
     * <pre>
     * 画像ファイル名
     * 拡張子は取り除かれる
     * </pre>
     */
    com.google.protobuf.ByteString
        getFilenameBytes();

    // optional float scale = 4000;
    /**
     * <code>optional float scale = 4000;</code>
     *
     * <pre>
     * 画像の拡大率
     * </pre>
     */
    boolean hasScale();
    /**
     * <code>optional float scale = 4000;</code>
     *
     * <pre>
     * 画像の拡大率
     * </pre>
     */
    float getScale();

    // optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
    /**
     * <code>optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;</code>
     *
     * <pre>
     * 画像読み込み時のピクセルフォーマット
     * </pre>
     */
    boolean hasImportPixelFormat();
    /**
     * <code>optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;</code>
     *
     * <pre>
     * 画像読み込み時のピクセルフォーマット
     * </pre>
     */
    com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat getImportPixelFormat();
  }
  /**
   * Protobuf type {@code jc_res_atlas.AtlasGroup}
   *
   * <pre>
   * アトラス化した画像の親グループ
   * </pre>
   */
  public static final class AtlasGroup extends
      com.google.protobuf.GeneratedMessage
      implements AtlasGroupOrBuilder {
    // Use AtlasGroup.newBuilder() to construct.
    private AtlasGroup(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AtlasGroup(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AtlasGroup defaultInstance;
    public static AtlasGroup getDefaultInstance() {
      return defaultInstance;
    }

    public AtlasGroup getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AtlasGroup(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8002: {
              bitField0_ |= 0x00000001;
              uniqueId_ = input.readBytes();
              break;
            }
            case 16002: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                images_ = new java.util.ArrayList<com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture>();
                mutable_bitField0_ |= 0x00000002;
              }
              images_.add(input.readMessage(com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.PARSER, extensionRegistry));
              break;
            }
            case 24002: {
              bitField0_ |= 0x00000002;
              filename_ = input.readBytes();
              break;
            }
            case 32005: {
              bitField0_ |= 0x00000004;
              scale_ = input.readFloat();
              break;
            }
            case 40000: {
              int rawValue = input.readEnum();
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat value = com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5000, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                importPixelFormat_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          images_ = java.util.Collections.unmodifiableList(images_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasGroup_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasGroup_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.class, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.Builder.class);
    }

    public static com.google.protobuf.Parser<AtlasGroup> PARSER =
        new com.google.protobuf.AbstractParser<AtlasGroup>() {
      public AtlasGroup parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AtlasGroup(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AtlasGroup> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code jc_res_atlas.AtlasGroup.PixelFormat}
     *
     * <pre>
     * テクスチャフォーマット
     * </pre>
     */
    public enum PixelFormat
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>RGBA8888 = 0;</code>
       *
       * <pre>
       * </pre>
       */
      RGBA8888(0, 0),
      /**
       * <code>RGB888 = 1;</code>
       *
       * <pre>
       * </pre>
       */
      RGB888(1, 1),
      /**
       * <code>RGB565 = 2;</code>
       *
       * <pre>
       * </pre>
       */
      RGB565(2, 2),
      /**
       * <code>RGBA4444 = 3;</code>
       *
       * <pre>
       * </pre>
       */
      RGBA4444(3, 3),
      /**
       * <code>RGB5551 = 4;</code>
       *
       * <pre>
       * </pre>
       */
      RGB5551(4, 4),
      ;

      /**
       * <code>RGBA8888 = 0;</code>
       *
       * <pre>
       * </pre>
       */
      public static final int RGBA8888_VALUE = 0;
      /**
       * <code>RGB888 = 1;</code>
       *
       * <pre>
       * </pre>
       */
      public static final int RGB888_VALUE = 1;
      /**
       * <code>RGB565 = 2;</code>
       *
       * <pre>
       * </pre>
       */
      public static final int RGB565_VALUE = 2;
      /**
       * <code>RGBA4444 = 3;</code>
       *
       * <pre>
       * </pre>
       */
      public static final int RGBA4444_VALUE = 3;
      /**
       * <code>RGB5551 = 4;</code>
       *
       * <pre>
       * </pre>
       */
      public static final int RGB5551_VALUE = 4;


      public final int getNumber() { return value; }

      public static PixelFormat valueOf(int value) {
        switch (value) {
          case 0: return RGBA8888;
          case 1: return RGB888;
          case 2: return RGB565;
          case 3: return RGBA4444;
          case 4: return RGB5551;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<PixelFormat>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<PixelFormat>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<PixelFormat>() {
              public PixelFormat findValueByNumber(int number) {
                return PixelFormat.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.getDescriptor().getEnumTypes().get(0);
      }

      private static final PixelFormat[] VALUES = values();

      public static PixelFormat valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private PixelFormat(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:jc_res_atlas.AtlasGroup.PixelFormat)
    }

    private int bitField0_;
    // required string uniqueId = 1000;
    public static final int UNIQUEID_FIELD_NUMBER = 1000;
    private java.lang.Object uniqueId_;
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * 識別子
     * </pre>
     */
    public boolean hasUniqueId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * 識別子
     * </pre>
     */
    public java.lang.String getUniqueId() {
      java.lang.Object ref = uniqueId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          uniqueId_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string uniqueId = 1000;</code>
     *
     * <pre>
     * 識別子
     * </pre>
     */
    public com.google.protobuf.ByteString
        getUniqueIdBytes() {
      java.lang.Object ref = uniqueId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uniqueId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // repeated .jc_res_atlas.AtlasTexture images = 2000;
    public static final int IMAGES_FIELD_NUMBER = 2000;
    private java.util.List<com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture> images_;
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    public java.util.List<com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture> getImagesList() {
      return images_;
    }
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    public java.util.List<? extends com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder> 
        getImagesOrBuilderList() {
      return images_;
    }
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    public int getImagesCount() {
      return images_.size();
    }
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture getImages(int index) {
      return images_.get(index);
    }
    /**
     * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
     *
     * <pre>
     * 画像配列
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder getImagesOrBuilder(
        int index) {
      return images_.get(index);
    }

    // required string filename = 3000;
    public static final int FILENAME_FIELD_NUMBER = 3000;
    private java.lang.Object filename_;
    /**
     * <code>required string filename = 3000;</code>
     *
     * <pre>
     * 画像ファイル名
     * 拡張子は取り除かれる
     * </pre>
     */
    public boolean hasFilename() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required string filename = 3000;</code>
     *
     * <pre>
     * 画像ファイル名
     * 拡張子は取り除かれる
     * </pre>
     */
    public java.lang.String getFilename() {
      java.lang.Object ref = filename_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          filename_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string filename = 3000;</code>
     *
     * <pre>
     * 画像ファイル名
     * 拡張子は取り除かれる
     * </pre>
     */
    public com.google.protobuf.ByteString
        getFilenameBytes() {
      java.lang.Object ref = filename_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        filename_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional float scale = 4000;
    public static final int SCALE_FIELD_NUMBER = 4000;
    private float scale_;
    /**
     * <code>optional float scale = 4000;</code>
     *
     * <pre>
     * 画像の拡大率
     * </pre>
     */
    public boolean hasScale() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float scale = 4000;</code>
     *
     * <pre>
     * 画像の拡大率
     * </pre>
     */
    public float getScale() {
      return scale_;
    }

    // optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
    public static final int IMPORTPIXELFORMAT_FIELD_NUMBER = 5000;
    private com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat importPixelFormat_;
    /**
     * <code>optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;</code>
     *
     * <pre>
     * 画像読み込み時のピクセルフォーマット
     * </pre>
     */
    public boolean hasImportPixelFormat() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;</code>
     *
     * <pre>
     * 画像読み込み時のピクセルフォーマット
     * </pre>
     */
    public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat getImportPixelFormat() {
      return importPixelFormat_;
    }

    private void initFields() {
      uniqueId_ = "";
      images_ = java.util.Collections.emptyList();
      filename_ = "";
      scale_ = 0F;
      importPixelFormat_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat.RGBA8888;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasUniqueId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFilename()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getImagesCount(); i++) {
        if (!getImages(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1000, getUniqueIdBytes());
      }
      for (int i = 0; i < images_.size(); i++) {
        output.writeMessage(2000, images_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(3000, getFilenameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(4000, scale_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(5000, importPixelFormat_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1000, getUniqueIdBytes());
      }
      for (int i = 0; i < images_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2000, images_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3000, getFilenameBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4000, scale_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5000, importPixelFormat_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code jc_res_atlas.AtlasGroup}
     *
     * <pre>
     * アトラス化した画像の親グループ
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroupOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasGroup_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasGroup_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.class, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.Builder.class);
      }

      // Construct using com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getImagesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        uniqueId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (imagesBuilder_ == null) {
          images_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          imagesBuilder_.clear();
        }
        filename_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        scale_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        importPixelFormat_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat.RGBA8888;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.internal_static_jc_res_atlas_AtlasGroup_descriptor;
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup getDefaultInstanceForType() {
        return com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.getDefaultInstance();
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup build() {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup buildPartial() {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup result = new com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.uniqueId_ = uniqueId_;
        if (imagesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            images_ = java.util.Collections.unmodifiableList(images_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.images_ = images_;
        } else {
          result.images_ = imagesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.filename_ = filename_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.scale_ = scale_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.importPixelFormat_ = importPixelFormat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup) {
          return mergeFrom((com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup other) {
        if (other == com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.getDefaultInstance()) return this;
        if (other.hasUniqueId()) {
          bitField0_ |= 0x00000001;
          uniqueId_ = other.uniqueId_;
          onChanged();
        }
        if (imagesBuilder_ == null) {
          if (!other.images_.isEmpty()) {
            if (images_.isEmpty()) {
              images_ = other.images_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureImagesIsMutable();
              images_.addAll(other.images_);
            }
            onChanged();
          }
        } else {
          if (!other.images_.isEmpty()) {
            if (imagesBuilder_.isEmpty()) {
              imagesBuilder_.dispose();
              imagesBuilder_ = null;
              images_ = other.images_;
              bitField0_ = (bitField0_ & ~0x00000002);
              imagesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getImagesFieldBuilder() : null;
            } else {
              imagesBuilder_.addAllMessages(other.images_);
            }
          }
        }
        if (other.hasFilename()) {
          bitField0_ |= 0x00000004;
          filename_ = other.filename_;
          onChanged();
        }
        if (other.hasScale()) {
          setScale(other.getScale());
        }
        if (other.hasImportPixelFormat()) {
          setImportPixelFormat(other.getImportPixelFormat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasUniqueId()) {
          
          return false;
        }
        if (!hasFilename()) {
          
          return false;
        }
        for (int i = 0; i < getImagesCount(); i++) {
          if (!getImages(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string uniqueId = 1000;
      private java.lang.Object uniqueId_ = "";
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * 識別子
       * </pre>
       */
      public boolean hasUniqueId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * 識別子
       * </pre>
       */
      public java.lang.String getUniqueId() {
        java.lang.Object ref = uniqueId_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          uniqueId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * 識別子
       * </pre>
       */
      public com.google.protobuf.ByteString
          getUniqueIdBytes() {
        java.lang.Object ref = uniqueId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uniqueId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * 識別子
       * </pre>
       */
      public Builder setUniqueId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        uniqueId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * 識別子
       * </pre>
       */
      public Builder clearUniqueId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        uniqueId_ = getDefaultInstance().getUniqueId();
        onChanged();
        return this;
      }
      /**
       * <code>required string uniqueId = 1000;</code>
       *
       * <pre>
       * 識別子
       * </pre>
       */
      public Builder setUniqueIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        uniqueId_ = value;
        onChanged();
        return this;
      }

      // repeated .jc_res_atlas.AtlasTexture images = 2000;
      private java.util.List<com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture> images_ =
        java.util.Collections.emptyList();
      private void ensureImagesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          images_ = new java.util.ArrayList<com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture>(images_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder> imagesBuilder_;

      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public java.util.List<com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture> getImagesList() {
        if (imagesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(images_);
        } else {
          return imagesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public int getImagesCount() {
        if (imagesBuilder_ == null) {
          return images_.size();
        } else {
          return imagesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture getImages(int index) {
        if (imagesBuilder_ == null) {
          return images_.get(index);
        } else {
          return imagesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder setImages(
          int index, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture value) {
        if (imagesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImagesIsMutable();
          images_.set(index, value);
          onChanged();
        } else {
          imagesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder setImages(
          int index, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder builderForValue) {
        if (imagesBuilder_ == null) {
          ensureImagesIsMutable();
          images_.set(index, builderForValue.build());
          onChanged();
        } else {
          imagesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder addImages(com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture value) {
        if (imagesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImagesIsMutable();
          images_.add(value);
          onChanged();
        } else {
          imagesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder addImages(
          int index, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture value) {
        if (imagesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureImagesIsMutable();
          images_.add(index, value);
          onChanged();
        } else {
          imagesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder addImages(
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder builderForValue) {
        if (imagesBuilder_ == null) {
          ensureImagesIsMutable();
          images_.add(builderForValue.build());
          onChanged();
        } else {
          imagesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder addImages(
          int index, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder builderForValue) {
        if (imagesBuilder_ == null) {
          ensureImagesIsMutable();
          images_.add(index, builderForValue.build());
          onChanged();
        } else {
          imagesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder addAllImages(
          java.lang.Iterable<? extends com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture> values) {
        if (imagesBuilder_ == null) {
          ensureImagesIsMutable();
          super.addAll(values, images_);
          onChanged();
        } else {
          imagesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder clearImages() {
        if (imagesBuilder_ == null) {
          images_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          imagesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public Builder removeImages(int index) {
        if (imagesBuilder_ == null) {
          ensureImagesIsMutable();
          images_.remove(index);
          onChanged();
        } else {
          imagesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder getImagesBuilder(
          int index) {
        return getImagesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder getImagesOrBuilder(
          int index) {
        if (imagesBuilder_ == null) {
          return images_.get(index);  } else {
          return imagesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public java.util.List<? extends com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder> 
           getImagesOrBuilderList() {
        if (imagesBuilder_ != null) {
          return imagesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(images_);
        }
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder addImagesBuilder() {
        return getImagesFieldBuilder().addBuilder(
            com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.getDefaultInstance());
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder addImagesBuilder(
          int index) {
        return getImagesFieldBuilder().addBuilder(
            index, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.getDefaultInstance());
      }
      /**
       * <code>repeated .jc_res_atlas.AtlasTexture images = 2000;</code>
       *
       * <pre>
       * 画像配列
       * </pre>
       */
      public java.util.List<com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder> 
           getImagesBuilderList() {
        return getImagesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder> 
          getImagesFieldBuilder() {
        if (imagesBuilder_ == null) {
          imagesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTexture.Builder, com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasTextureOrBuilder>(
                  images_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          images_ = null;
        }
        return imagesBuilder_;
      }

      // required string filename = 3000;
      private java.lang.Object filename_ = "";
      /**
       * <code>required string filename = 3000;</code>
       *
       * <pre>
       * 画像ファイル名
       * 拡張子は取り除かれる
       * </pre>
       */
      public boolean hasFilename() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required string filename = 3000;</code>
       *
       * <pre>
       * 画像ファイル名
       * 拡張子は取り除かれる
       * </pre>
       */
      public java.lang.String getFilename() {
        java.lang.Object ref = filename_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          filename_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string filename = 3000;</code>
       *
       * <pre>
       * 画像ファイル名
       * 拡張子は取り除かれる
       * </pre>
       */
      public com.google.protobuf.ByteString
          getFilenameBytes() {
        java.lang.Object ref = filename_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          filename_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string filename = 3000;</code>
       *
       * <pre>
       * 画像ファイル名
       * 拡張子は取り除かれる
       * </pre>
       */
      public Builder setFilename(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        filename_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string filename = 3000;</code>
       *
       * <pre>
       * 画像ファイル名
       * 拡張子は取り除かれる
       * </pre>
       */
      public Builder clearFilename() {
        bitField0_ = (bitField0_ & ~0x00000004);
        filename_ = getDefaultInstance().getFilename();
        onChanged();
        return this;
      }
      /**
       * <code>required string filename = 3000;</code>
       *
       * <pre>
       * 画像ファイル名
       * 拡張子は取り除かれる
       * </pre>
       */
      public Builder setFilenameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        filename_ = value;
        onChanged();
        return this;
      }

      // optional float scale = 4000;
      private float scale_ ;
      /**
       * <code>optional float scale = 4000;</code>
       *
       * <pre>
       * 画像の拡大率
       * </pre>
       */
      public boolean hasScale() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float scale = 4000;</code>
       *
       * <pre>
       * 画像の拡大率
       * </pre>
       */
      public float getScale() {
        return scale_;
      }
      /**
       * <code>optional float scale = 4000;</code>
       *
       * <pre>
       * 画像の拡大率
       * </pre>
       */
      public Builder setScale(float value) {
        bitField0_ |= 0x00000008;
        scale_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float scale = 4000;</code>
       *
       * <pre>
       * 画像の拡大率
       * </pre>
       */
      public Builder clearScale() {
        bitField0_ = (bitField0_ & ~0x00000008);
        scale_ = 0F;
        onChanged();
        return this;
      }

      // optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;
      private com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat importPixelFormat_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat.RGBA8888;
      /**
       * <code>optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;</code>
       *
       * <pre>
       * 画像読み込み時のピクセルフォーマット
       * </pre>
       */
      public boolean hasImportPixelFormat() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;</code>
       *
       * <pre>
       * 画像読み込み時のピクセルフォーマット
       * </pre>
       */
      public com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat getImportPixelFormat() {
        return importPixelFormat_;
      }
      /**
       * <code>optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;</code>
       *
       * <pre>
       * 画像読み込み時のピクセルフォーマット
       * </pre>
       */
      public Builder setImportPixelFormat(com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        importPixelFormat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .jc_res_atlas.AtlasGroup.PixelFormat importPixelFormat = 5000;</code>
       *
       * <pre>
       * 画像読み込み時のピクセルフォーマット
       * </pre>
       */
      public Builder clearImportPixelFormat() {
        bitField0_ = (bitField0_ & ~0x00000010);
        importPixelFormat_ = com.eaglesakura.resource.texture.atlas.TextureAtlasData.AtlasGroup.PixelFormat.RGBA8888;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:jc_res_atlas.AtlasGroup)
    }

    static {
      defaultInstance = new AtlasGroup(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:jc_res_atlas.AtlasGroup)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_jc_res_atlas_Rectangle_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_jc_res_atlas_Rectangle_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_jc_res_atlas_Size_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_jc_res_atlas_Size_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_jc_res_atlas_AtlasTexture_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_jc_res_atlas_AtlasTexture_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_jc_res_atlas_AtlasGroup_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_jc_res_atlas_AtlasGroup_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n idl/atlas/TextureAtlasData.proto\022\014jc_r" +
      "es_atlas\";\n\tRectangle\022\n\n\001x\030\350\007 \002(\005\022\n\n\001y\030\320" +
      "\017 \002(\005\022\n\n\001w\030\270\027 \002(\005\022\n\n\001h\030\240\037 \002(\005\"\036\n\004Size\022\n\n" +
      "\001w\030\350\007 \002(\005\022\n\n\001h\030\320\017 \002(\005\"\336\001\n\014AtlasTexture\022\021" +
      "\n\010uniqueId\030\350\007 \002(\t\022\021\n\010filename\030\320\017 \002(\t\022\'\n\005" +
      "frame\030\270\027 \002(\0132\027.jc_res_atlas.Rectangle\022\020\n" +
      "\007rotated\030\240\037 \002(\010\022\020\n\007trimmed\030\210\' \002(\010\0222\n\020spr" +
      "iteSourceSize\030\360. \001(\0132\027.jc_res_atlas.Rect" +
      "angle\022\'\n\nsourceSize\030\3306 \001(\0132\022.jc_res_atla" +
      "s.Size\"\201\002\n\nAtlasGroup\022\021\n\010uniqueId\030\350\007 \002(\t",
      "\022+\n\006images\030\320\017 \003(\0132\032.jc_res_atlas.AtlasTe" +
      "xture\022\021\n\010filename\030\270\027 \002(\t\022\016\n\005scale\030\240\037 \001(\002" +
      "\022@\n\021importPixelFormat\030\210\' \001(\0162$.jc_res_at" +
      "las.AtlasGroup.PixelFormat\"N\n\013PixelForma" +
      "t\022\014\n\010RGBA8888\020\000\022\n\n\006RGB888\020\001\022\n\n\006RGB565\020\002\022" +
      "\014\n\010RGBA4444\020\003\022\013\n\007RGB5551\020\004B(\n&com.eagles" +
      "akura.resource.texture.atlas"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_jc_res_atlas_Rectangle_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_jc_res_atlas_Rectangle_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_jc_res_atlas_Rectangle_descriptor,
              new java.lang.String[] { "X", "Y", "W", "H", });
          internal_static_jc_res_atlas_Size_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_jc_res_atlas_Size_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_jc_res_atlas_Size_descriptor,
              new java.lang.String[] { "W", "H", });
          internal_static_jc_res_atlas_AtlasTexture_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_jc_res_atlas_AtlasTexture_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_jc_res_atlas_AtlasTexture_descriptor,
              new java.lang.String[] { "UniqueId", "Filename", "Frame", "Rotated", "Trimmed", "SpriteSourceSize", "SourceSize", });
          internal_static_jc_res_atlas_AtlasGroup_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_jc_res_atlas_AtlasGroup_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_jc_res_atlas_AtlasGroup_descriptor,
              new java.lang.String[] { "UniqueId", "Images", "Filename", "Scale", "ImportPixelFormat", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
